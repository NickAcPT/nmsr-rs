[package]
name = "nmsr-aas"
version = "0.2.0"
edition = "2021"
build = "build.rs"

authors.workspace = true
homepage.workspace = true

[lib]
crate-type = ["cdylib", "rlib"]
name = "nmsr_aas_lib"

[dependencies]
console_error_panic_hook = { version = "0.1" }

# NMSR Rendering - Library for rendering
nmsr-rendering = { path = "../nmsr-3d-renderer/nmsr-rendering", features = [
    "part_tracker",
], default-features = false }

# NMSR Rasterizer - A software-based rasterizer for nmsr-rendering
nmsr-rasterizer-test = { path = "../../nmsr-rasterizer-test" }

nmsr-rendering-blockbench-model-generator-experiment = { path = "../utils/nmsr-rendering-blockbench-model-generator-experiment" }

ears-rs = { workspace = true }

anyhow = { workspace = true }
axum = { git = "https://github.com/tokio-rs/axum", rev = "a9ac5241dc5138b366d05fa67c0cdf1a29ba66ea", features = [
    "macros", "form", "json", "matched-path", "original-uri", "query", "tower-log"
], default-features = false }
axum-extra = { git = "https://github.com/tokio-rs/axum", rev = "a9ac5241dc5138b366d05fa67c0cdf1a29ba66ea", features = [
    "multipart",
] }
http-body-util = "0.1.0"

# async-trait - Async trait support because Rust is bad at async
async-trait = { workspace = true }

# Twelf - Configuration library
twelf = { version = "0.12", default-features = false, features = [
    "env",
    "toml",
    "default_trait",
] }

# Serde - Serialization and Deserialization framework
serde = { workspace = true }
serde_json = { workspace = true }

base64 = "0.21"

url = "2.4"

# Tokio - Async runtime
tokio = { workspace = true, features = ["macros", "sync"] }

# Tracing - Logging framework
tracing = { workspace = true }

# Tracing subscriber - Composing Tracing subscribers
tracing-subscriber = { version = "0.3", features = ["env-filter", "json"] }

# Strum - Enum helper library
strum = { workspace = true }
enumset = { version = "1.1", features = ["serde", "alloc", "std"] }

# Uuid - Uuid library
uuid = { workspace = true }

# ThisError - Error library
thiserror = { workspace = true }

# Derive More - More derive macros because Rust's standard library doesn't have enough
derive_more = { workspace = true }

# Tower - Service framework
tower = { version = "0.4", features = ["limit", "retry", "load-shed"], default-features = false }
tower-http = { version = "0.5", features = [] }
http = "1.0"

# symlink - Symbolic link library (because Rust's standard library doesn't handle that properly for us)
symlink = "0.1"
humantime-serde = "1.1"
serde_with = "3.3"
image = { workspace = true, default-features = false }
mtpng = "0.3"

chrono = "0.4"
tokio-stream = { version = "0.1", features = [] }
sync_wrapper = "0.1"

regex = "1.9"
indoc = "2"

xxhash-rust = { workspace = true }

is_empty = "0.2"

serde-wasm-bindgen = "0.6.1"
wasm-bindgen = { version = "=0.2.89", optional = true }
wasm-bindgen-futures = { version = "0.4", optional = true }
web-sys = { version = "0.3", features = ["Request", "RequestInit", "WorkerGlobalScope", "console"], optional = true }

getrandom = { version = "0.2", features = ["js"] }

pin-project-lite = "0.2"

[features]
default = ["ears", "wasm"]
ears = [
    "nmsr-rasterizer-test/ears",
    "nmsr-rendering/ears",
    "nmsr-rendering-blockbench-model-generator-experiment/ears",
]
wasm = ["dep:wasm-bindgen", "dep:wasm-bindgen-futures", "dep:web-sys"]

[build-dependencies]
vergen = { version = "8.2.4", default-features = false, features = [
    "git",
    "gitcl",
] }

[package.metadata.wasm-pack.profile.dev]
wasm-opt = false

[package.metadata.wasm-pack.profile.release]
wasm-opt = ["--enable-simd", "-g", "--roundtrip"]