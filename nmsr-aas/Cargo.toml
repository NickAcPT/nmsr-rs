[package]
name = "nmsr-aas"
version = "0.2.0"
edition = "2021"
build = "build.rs"

authors.workspace = true
homepage.workspace = true

[dependencies]
# NMSR Rendering - Library for rendering using a wgpu backed rendering engine
nmsr-rendering = { path = "../nmsr-3d-renderer/nmsr-rendering", features = [
    "part_tracker",
] }

nmsr-rendering-blockbench-model-generator-experiment = { path = "../utils/nmsr-rendering-blockbench-model-generator-experiment" }

ears-rs = { workspace = true }

anyhow = { workspace = true }
axum = { workspace = true, features = ["macros", "tokio"] }
axum-extra = { workspace = true, features = ["multipart"] }
http-body-util = { workspace = true }

# async-trait - Async trait support because Rust is bad at async
async-trait = { workspace = true }

# Twelf - Configuration library
twelf = { workspace = true, default-features = false, features = [
    "env",
    "toml",
    "default_trait",
] }

# Serde - Serialization and Deserialization framework
serde = { workspace = true }
serde_json = { workspace = true }

base64 = { workspace = true }

# Hyper - HTTP client
hyper = { workspace = true, features = ["client"] }
hyper-util = { workspace = true, features = [
    "client",
    "client-legacy",
    "http1",
    "http2",
    "server-auto",
    "tokio",
] }
hyper-tls = { workspace = true }
url = { workspace = true }

# Tokio - Async runtime
tokio = { workspace = true, features = [
    "macros",
    "fs",
    "sync",
    "signal",
    "rt-multi-thread",
] }

# async-scoped - Scoped async tasks
async-scoped = { workspace = true, features = ["use-tokio"] }

# Tracing - Logging framework
tracing = { workspace = true }

# Tracing subscriber - Composing Tracing subscribers
tracing-subscriber = { workspace = true, features = ["env-filter", "json"] }

# OpenTelemetry - Tracing framework
opentelemetry = { workspace = true, features = [] }
opentelemetry_sdk = { workspace = true, features = ["rt-tokio"] }
opentelemetry-otlp = { workspace = true, default-features = true }

# Tracing OpenTelemetry - Tracing subscriber for OpenTelemetry
tracing-opentelemetry = { workspace = true }

# Strum - Enum helper library
strum = { workspace = true }
enumset = { workspace = true, features = ["serde", "alloc"] }

# Uuid - Uuid library
uuid = { workspace = true }

# ThisError - Error library
thiserror = { workspace = true }

# Derive More - More derive macros because Rust's standard library doesn't have enough
derive_more = { workspace = true, features = ["debug", "deref", "from", "deref_mut", "std"]}

# Tower - Service framework
tower = { workspace = true, features = [
    "buffer",
    "limit",
    "timeout",
    "retry",
    "balance",
] }
tower-http = { workspace = true, features = [
    "set-header",
    "trace",
    "request-id",
    "cors",
    "normalize-path",
    "fs",
] }
http = { workspace = true }

# symlink - Symbolic link library (because Rust's standard library doesn't handle that properly for us)
symlink = { workspace = true }
humantime-serde = { workspace = true }
serde_with = { workspace = true }
deadpool = { workspace = true }
image = { workspace = true, default-features = false }

chrono = { workspace = true }
tokio-stream = { workspace = true, features = ["fs"] }
sync_wrapper = { workspace = true }

indoc = { workspace = true }

xxhash-rust = { workspace = true }

is_empty = { workspace = true }

urlencoding = { workspace = true }

[features]
default = []
ears = [
    "nmsr-rendering/ears",
    "nmsr-rendering-blockbench-model-generator-experiment/ears",
]
