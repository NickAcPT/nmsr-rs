file /rustc/dd430bc8c22f57992ec1457a87437d14283fdd65\library\core\src\num\uint_macros.rs does not exist!
file /rustc/dd430bc8c22f57992ec1457a87437d14283fdd65\library\core\src\cmp.rs does not exist!
file /rustc/dd430bc8c22f57992ec1457a87437d14283fdd65\library\core\src\iter\range.rs does not exist!
file /rustc/dd430bc8c22f57992ec1457a87437d14283fdd65\library\std\src\f32.rs does not exist!
file /rustc/dd430bc8c22f57992ec1457a87437d14283fdd65\library\core\src\num\f32.rs does not exist!
file /rustc/dd430bc8c22f57992ec1457a87437d14283fdd65\library\core\src\num\mod.rs does not exist!
file /rustc/dd430bc8c22f57992ec1457a87437d14283fdd65\library\core\src\..\..\stdarch\crates\core_arch\src\x86\sse.rs does not exist!
file /rustc/dd430bc8c22f57992ec1457a87437d14283fdd65\library\core\src\slice\index.rs does not exist!
file /rustc/dd430bc8c22f57992ec1457a87437d14283fdd65\library\core\src\ops\arith.rs does not exist!
file /rustc/dd430bc8c22f57992ec1457a87437d14283fdd65\library\core\src\option.rs does not exist!
file /rustc/dd430bc8c22f57992ec1457a87437d14283fdd65\library\core\src\fmt\mod.rs does not exist!
 }
 push    r15
 push    r14
 push    r13
 push    r12
 push    rsi
 push    rdi
 push    rbp
 push    rbx
 sub     rsp, 792
 movaps  xmmword, ptr, [rsp, +, 768], xmm15
 movaps  xmmword, ptr, [rsp, +, 752], xmm14
 movaps  xmmword, ptr, [rsp, +, 736], xmm13
 movaps  xmmword, ptr, [rsp, +, 720], xmm12
 movaps  xmmword, ptr, [rsp, +, 704], xmm11
 movaps  xmmword, ptr, [rsp, +, 688], xmm10
 movaps  xmmword, ptr, [rsp, +, 672], xmm9
 movaps  xmmword, ptr, [rsp, +, 656], xmm8
 movaps  xmmword, ptr, [rsp, +, 640], xmm7
 movaps  xmmword, ptr, [rsp, +, 624], xmm6
 
 cmp     r8, 3
 jne     .LBB63_35
 .collect();
 mov     r10, rdx
 mov     r14, rcx
 mov     rdx, qword, ptr, [rsp, +, 896]
 movzx   ecx, word, ptr, [r10, +, 2]
 cmp     rcx, rdx
 jae     .LBB63_37
 shl     rcx, 5
 mov     rax, qword, ptr, [r9, +, rcx, +, 16]
 mov     qword, ptr, [rsp, +, 80], rax
 movups  xmm0, xmmword, ptr, [r9, +, rcx]
 movaps  xmmword, ptr, [rsp, +, 64], xmm0
 let vertices = unsafe { vertices.into_inner_unchecked() };
 movzx   eax, word, ptr, [r10, +, 4]
 cmp     rax, rdx
 jae     .LBB63_38
 mov     rbp, qword, ptr, [rsp, +, 904]
 movss   xmm0, dword, ptr, [r9, +, rcx, +, 24]
 movss   dword, ptr, [rsp, +, 196], xmm0
 movss   xmm7, dword, ptr, [r9, +, rcx, +, 28]
 movaps  xmm5, xmmword, ptr, [rsp, +, 64]
 movups  xmm4, xmmword, ptr, [rsp, +, 68]
 movups  xmm10, xmmword, ptr, [rsp, +, 72]
 movaps  xmm3, xmmword, ptr, [rbp, +, 32]
 movaps  xmm2, xmmword, ptr, [rbp, +, 48]
 movaps  xmm1, xmmword, ptr, [rbp, +, 64]
 movaps  xmm0, xmmword, ptr, [rbp, +, 80]
 shl     rax, 5
 mov     rcx, qword, ptr, [r9, +, rax, +, 16]
 mov     qword, ptr, [rsp, +, 80], rcx
 movups  xmm6, xmmword, ptr, [r9, +, rax]
 movaps  xmmword, ptr, [rsp, +, 64], xmm6
 
 movzx   ecx, word, ptr, [r10]
 cmp     rcx, rdx
 jae     .LBB63_65
 movaps  xmmword, ptr, [rsp, +, 400], xmm7
 shufps  xmm5, xmm5, 0
 mulps   xmm5, xmm3
 shufps  xmm4, xmm4, 0
 mulps   xmm4, xmm2
 addps   xmm4, xmm5
 movaps  xmmword, ptr, [rsp, +, 320], xmm10
 shufps  xmm10, xmm10, 0
 mulps   xmm10, xmm1
 addps   xmm10, xmm4
 addps   xmm10, xmm0
 movaps  xmm4, xmm10
 shufps  xmm4, xmm10, 255
 divps   xmm10, xmm4
 movss   xmm4, dword, ptr, [r9, +, rax, +, 24]
 movss   dword, ptr, [rsp, +, 192], xmm4
 movss   xmm4, dword, ptr, [r9, +, rax, +, 28]
 movaps  xmmword, ptr, [rsp, +, 384], xmm4
 movaps  xmm4, xmmword, ptr, [rsp, +, 64]
 movups  xmm5, xmmword, ptr, [rsp, +, 68]
 movups  xmm11, xmmword, ptr, [rsp, +, 72]
 shufps  xmm4, xmm4, 0
 mulps   xmm4, xmm3
 shufps  xmm5, xmm5, 0
 mulps   xmm5, xmm2
 addps   xmm5, xmm4
 movaps  xmmword, ptr, [rsp, +, 304], xmm11
 shufps  xmm11, xmm11, 0
 mulps   xmm11, xmm1
 addps   xmm11, xmm5
 addps   xmm11, xmm0
 movaps  xmm4, xmm11
 shufps  xmm4, xmm11, 255
 divps   xmm11, xmm4
 shl     rcx, 5
 mov     rax, qword, ptr, [r9, +, rcx, +, 16]
 mov     qword, ptr, [rsp, +, 80], rax
 movups  xmm4, xmmword, ptr, [r9, +, rcx]
 movaps  xmmword, ptr, [rsp, +, 64], xmm4
 movss   xmm4, dword, ptr, [r9, +, rcx, +, 24]
 movss   dword, ptr, [rsp, +, 188], xmm4
 movss   xmm4, dword, ptr, [r9, +, rcx, +, 28]
 movaps  xmmword, ptr, [rsp, +, 368], xmm4
 result.tex_coord /= result.position.z;
 movaps  xmm4, xmmword, ptr, [rsp, +, 64]
 movups  xmm5, xmmword, ptr, [rsp, +, 68]
 movups  xmm13, xmmword, ptr, [rsp, +, 72]
     shufps  xmm4, xmm4, 0
     mulps   xmm4, xmm3
     shufps  xmm5, xmm5, 0
     mulps   xmm5, xmm2
     addps   xmm5, xmm4
     movaps  xmmword, ptr, [rsp, +, 288], xmm13
     shufps  xmm13, xmm13, 0
     mulps   xmm13, xmm1
     addps   xmm13, xmm5
     addps   xmm13, xmm0
     movaps  xmm0, xmm13
     shufps  xmm0, xmm13, 255
     divps   xmm13, xmm0
     movaps  xmm3, xmmword, ptr, [rip, +, __xmm@000000003f800000bf8000003f800000]
     movaps  xmm15, xmm10
     mulps   xmm15, xmm3
     movaps  xmm9, xmm11
     mulps   xmm9, xmm3
     mulps   xmm3, xmm13
     movaps  xmm0, xmm15
     cmpunordss xmm0, xmm15
     movaps  xmm1, xmm0
     andps   xmm1, xmm9
     movaps  xmm2, xmm9
     minss   xmm2, xmm15
     andnps  xmm0, xmm2
     orps    xmm0, xmm1
     movaps  xmm1, xmm3
     minss   xmm1, xmm0
     cmpunordss xmm0, xmm0
     movaps  xmm2, xmm0
     movaps  xmm12, xmm3
     andps   xmm2, xmm3
     andnps  xmm0, xmm1
     orps    xmm0, xmm2
     call    floorf
     movaps  xmm6, xmm0
     ucomiss xmm15, xmm15
     movaps  xmm0, xmm9
     jp      .LBB63_6
     movaps  xmm0, xmm9
     maxss   xmm0, xmm15
.LBB63_6:
     movaps  xmm14, xmm12
     movaps  xmm1, xmm12
     maxss   xmm1, xmm0
     cmpunordss xmm0, xmm0
     movaps  xmm2, xmm0
     andps   xmm2, xmm12
     andnps  xmm0, xmm1
     orps    xmm0, xmm2
     call    ceilf
     movaps  xmm8, xmm0
     movaps  xmmword, ptr, [rsp, +, 208], xmm15
 let max_y = va.position.y.max(vb.position.y).max(vc.position.y).ceil();
 shufps  xmm15, xmm15, 85
 movaps  xmmword, ptr, [rsp, +, 144], xmm9
 shufps  xmm9, xmm9, 85
     movaps  xmm0, xmm15
     cmpunordss xmm0, xmm15
     movaps  xmm1, xmm0
     andps   xmm1, xmm9
     movaps  xmm2, xmm9
     minss   xmm2, xmm15
     andnps  xmm0, xmm2
     orps    xmm0, xmm1
 shufps  xmm14, xmm12, 85
     movaps  xmm1, xmm14
     minss   xmm1, xmm0
     cmpunordss xmm0, xmm0
     movaps  xmm2, xmm0
     andps   xmm2, xmm14
     andnps  xmm0, xmm1
     orps    xmm0, xmm2
     call    floorf
     movaps  xmm7, xmm0
     movaps  xmmword, ptr, [rsp, +, 336], xmm15
     ucomiss xmm15, xmm15
     jp      .LBB63_8
     maxss   xmm9, dword, ptr, [rsp, +, 336]
.LBB63_8:
     movaps  xmm0, xmm9
     cmpunordss xmm0, xmm9
     movaps  xmm1, xmm0
     andps   xmm1, xmm14
     maxss   xmm14, xmm9
     andnps  xmm0, xmm14
     orps    xmm0, xmm1
     call    ceilf
 let max_screen_x: u32 = map_float_u32(max_x, -1.0, 1.0, 0u32, entry.size.width);
 mov     r8d, dword, ptr, [r14, +, 208]
 movss   xmm2, dword, ptr, [rip, +, __real@bf800000]
     maxss   xmm6, xmm2
     movss   xmm3, dword, ptr, [rip, +, __real@3f800000]
     minss   xmm6, xmm3
 VertexInput {
 addss   xmm6, xmm3
 cvtsi2ss xmm5, r8
 movss   xmm1, dword, ptr, [rip, +, __real@3f000000]
 mulss   xmm6, xmm1
 mulss   xmm6, xmm5
 xorps   xmm4, xmm4
 addss   xmm6, xmm4
 cvttss2si rax, xmm6
 xor     r9d, r9d
 ucomiss xmm6, xmm4
 cmovb   eax, r9d
 movss   xmm9, dword, ptr, [rip, +, __real@4f7fffff]
 ucomiss xmm6, xmm9
 movaps  xmm6, xmm2
 mov     r11d, -1
 cmova   eax, r11d
     maxss   xmm8, xmm2
     minss   xmm8, xmm3
 addss   xmm8, xmm3
 movaps  xmm3, xmm5
 mulss   xmm8, xmm1
 mulss   xmm8, xmm5
 addss   xmm8, xmm4
 cvttss2si r10, xmm8
 ucomiss xmm8, xmm4
 cmovb   r10d, r9d
 ucomiss xmm8, xmm9
 cmova   r10d, r11d
 let max_screen_y: u32 = map_float_u32(max_y, -1.0, 1.0, 0u32, entry.size.height);
 mov     ecx, dword, ptr, [r14, +, 212]
 mov     qword, ptr, [rsp, +, 440], rcx
 VertexInput {
 xorps   xmm5, xmm5
 cvtsi2ss xmm5, rcx
     unpcklps xmm7, xmm0
     movaps  xmm0, xmmword, ptr, [rip, +, __xmm@0000000000000000bf800000bf800000]
     movaps  xmm1, xmm0
     maxps   xmm1, xmm7
     cmpunordps xmm7, xmm7
     andps   xmm0, xmm7
     andnps  xmm7, xmm1
     orps    xmm7, xmm0
     movaps  xmm0, xmmword, ptr, [rip, +, __xmm@00000000000000003f8000003f800000]
     movaps  xmm1, xmm0
     minps   xmm1, xmm7
     cmpunordps xmm7, xmm7
     movaps  xmm2, xmm0
     andps   xmm2, xmm7
     andnps  xmm7, xmm1
     orps    xmm7, xmm2
 addps   xmm7, xmm0
 mulps   xmm7, xmmword, ptr, [rip, +, __xmm@00000000000000003f0000003f000000]
 movaps  xmmword, ptr, [rsp, +, 528], xmm5
 movaps  xmm0, xmm5
 shufps  xmm0, xmm5, 0
 mulps   xmm0, xmm7
 xorps   xmm1, xmm1
 addps   xmm1, xmm0
 cvttss2si rcx, xmm1
 ucomiss xmm1, xmm4
 cmovb   ecx, r9d
 ucomiss xmm1, xmm9
 cmova   ecx, r11d
 shufps  xmm1, xmm1, 85
 cvttss2si rdx, xmm1
 ucomiss xmm1, xmm4
 cmovb   edx, r9d
 ucomiss xmm1, xmm9
 cmova   edx, r11d
     cmp     ecx, edx
     jae     .LBB63_53
     cmp     eax, r10d
     jae     .LBB63_53
     movss   dword, ptr, [rsp, +, 36], xmm3
     movaps  xmm3, xmmword, ptr, [rsp, +, 320]
     movaps  xmm0, xmm3
     shufps  xmm0, xmm3, 85
     movhlps xmm3, xmm3
     movhlps xmm10, xmm10
     movaps  xmm7, xmmword, ptr, [rsp, +, 304]
     movaps  xmm14, xmm7
     shufps  xmm14, xmm7, 85
     movhlps xmm7, xmm7
     movhlps xmm11, xmm11
     movaps  xmm9, xmmword, ptr, [rsp, +, 288]
     movaps  xmm8, xmm9
     shufps  xmm8, xmm9, 85
     movhlps xmm9, xmm9
     movhlps xmm13, xmm13
     divss   xmm0, xmm10
     movaps  xmmword, ptr, [rsp, +, 352], xmm0
     movaps  xmm1, xmm3
     divss   xmm1, xmm10
     movaps  xmmword, ptr, [rsp, +, 560], xmm1
     divss   xmm14, xmm11
     movaps  xmm1, xmm7
     divss   xmm1, xmm11
     divss   xmm8, xmm13
     movaps  xmm2, xmm9
     divss   xmm2, xmm13
     unpcklps xmm2, xmm1
     movaps  xmmword, ptr, [rsp, +, 544], xmm2
     movaps  xmm10, xmmword, ptr, [rsp, +, 144]
     unpcklps xmm10, xmm12
     movaps  xmm1, xmmword, ptr, [rsp, +, 208]
     shufps  xmm1, xmm1, 0
     subps   xmm10, xmm1
     movaps  xmm13, xmm12
     shufps  xmm13, xmmword, ptr, [rsp, +, 144], 17
     shufps  xmm13, xmmword, ptr, [rsp, +, 144], 226
     subps   xmm13, xmmword, ptr, [rsp, +, 336]
     movaps  xmm1, xmm10
     shufps  xmm1, xmm10, 85
     mulps   xmm1, xmm10
     movaps  xmm2, xmm13
     shufps  xmm2, xmm13, 85
     mulps   xmm2, xmm13
     addps   xmm2, xmm1
     movaps  xmm5, xmmword, ptr, [rsp, +, 144]
     unpckhps xmm5, xmm12
     movaps  xmm11, xmmword, ptr, [rsp, +, 208]
     shufps  xmm11, xmm11, 170
     subps   xmm5, xmm11
     movaps  xmm0, xmm5
     shufps  xmm0, xmm5, 85
     mulps   xmm0, xmm5
     addps   xmm0, xmm2
     movaps  xmm1, xmm10
     mulps   xmm1, xmm10
     movaps  xmm2, xmm13
     mulps   xmm2, xmm13
     addps   xmm2, xmm1
     movaps  xmm1, xmm5
     mulps   xmm1, xmm5
     addps   xmm1, xmm2
     movaps  xmm2, xmmword, ptr, [rsp, +, 208]
     movhlps xmm2, xmm2
     movaps  xmmword, ptr, [rsp, +, 576], xmm2
     subss   xmm4, xmm2
     shufps  xmm4, xmm4, 0
     shufps  xmm5, xmm5, 225
     mulps   xmm5, xmm4
     movaps  xmmword, ptr, [rsp, +, 608], xmm5
     movaps  xmm15, xmm1
     shufps  xmm15, xmm1, 85
     movaps  xmmword, ptr, [rsp, +, 592], xmm1
     mulps   xmm15, xmm1
     movaps  xmm1, xmm0
     mulps   xmm1, xmm0
     subps   xmm15, xmm1
     movss   xmm1, dword, ptr, [rbp, +, 96]
     movaps  xmm2, xmm1
     mulss   xmm2, xmm1
     movsd   xmm4, qword, ptr, [rbp, +, 100]
     movaps  xmm5, xmm4
     mulps   xmm5, xmm4
     addss   xmm2, xmm5
     shufps  xmm5, xmm5, 85
     addss   xmm5, xmm2
     xorps   xmm2, xmm2
     sqrtss  xmm2, xmm5
     movss   xmm5, dword, ptr, [rip, +, __real@3f800000]
     divss   xmm5, xmm2
     shufps  xmm1, xmm4, 212
     shufps  xmm1, xmm4, 82
     movaps  xmm2, xmmword, ptr, [rip, +, __xmm@80000000800000008000000080000000]
     xorps   xmm4, xmm2
     xorps   xmm1, xmm2
     mulss   xmm4, xmm5
     movaps  xmmword, ptr, [rsp, +, 480], xmm4
     shufps  xmm5, xmm5, 0
     mulps   xmm5, xmm1
     movaps  xmmword, ptr, [rsp, +, 496], xmm5
     movaps  xmm1, xmmword, ptr, [rsp, +, 368]
     movss   xmm9, xmm1
     movaps  xmmword, ptr, [rsp, +, 288], xmm9
     movaps  xmm9, xmmword, ptr, [rsp, +, 144]
     movaps  xmm1, xmmword, ptr, [rsp, +, 384]
     movss   xmm7, xmm1
     movaps  xmmword, ptr, [rsp, +, 304], xmm7
     movaps  xmm7, xmmword, ptr, [rsp, +, 208]
     movaps  xmm1, xmmword, ptr, [rsp, +, 400]
     movss   xmm3, xmm1
     movaps  xmmword, ptr, [rsp, +, 320], xmm3
     movss   xmm3, dword, ptr, [rsp, +, 36]
     movaps  xmm1, xmm12
     shufps  xmm12, xmm12, 170
     movss   xmm12, xmm8
     movaps  xmmword, ptr, [rsp, +, 368], xmm12
     movaps  xmm2, xmm9
     unpckhpd xmm2, xmm9
     movaps  xmmword, ptr, [rsp, +, 384], xmm2
     movhlps xmm1, xmm1
     movaps  xmmword, ptr, [rsp, +, 400], xmm1
     mov     r9d, dword, ptr, [rbp, +, 28]
     shufps  xmm9, xmm9, 170
     movss   xmm9, xmm14
     xorps   xmm1, xmm1
     cvtsi2ss xmm1, r9
     movss   dword, ptr, [rsp, +, 200], xmm1
     movaps  xmm1, xmmword, ptr, [rsp, +, 352]
     movss   xmm11, xmm1
     movaps  xmmword, ptr, [rsp, +, 352], xmm11
     movss   xmm1, dword, ptr, [rbp, +, 108]
     movss   dword, ptr, [rsp, +, 180], xmm1
     mov     r9d, dword, ptr, [r14, +, 168]
     mov     r11d, dword, ptr, [r14, +, 172]
     mov     qword, ptr, [rsp, +, 280], r11
     mov     r11, qword, ptr, [r14, +, 160]
     mov     qword, ptr, [rsp, +, 272], r11
     mov     edi, dword, ptr, [r14, +, 200]
     mov     r11d, dword, ptr, [r14, +, 204]
     mov     qword, ptr, [rsp, +, 240], r11
     mov     r11, qword, ptr, [r14, +, 192]
     mov     qword, ptr, [rsp, +, 232], r11
     mov     ebx, eax
     mov     esi, ecx
     mov     eax, edx
     mov     qword, ptr, [rsp, +, 432], rax
     shufps  xmm13, xmm13, 225
     movaps  xmmword, ptr, [rsp, +, 512], xmm13
     shufps  xmm10, xmm10, 225
     movaps  xmmword, ptr, [rsp, +, 144], xmm10
     shufps  xmm0, xmm0, 0
     movaps  xmm10, xmm0
     mov     rax, rsi
     imul    rax, rdi
     lea     rcx, [4*rbx]
     lea     rdx, [rcx, +, 4*rax]
     add     rdx, qword, ptr, [r14, +, 176]
     mov     qword, ptr, [rsp, +, 48], rdx
     shufps  xmm15, xmm15, 0
     movaps  xmm13, xmm15
     add     rax, rbx
     lea     r13, [4*rax, +, 4]
     mov     rax, rsi
     imul    rax, r9
     lea     r15, [rcx, +, 4*rax]
     add     r15, qword, ptr, [r14, +, 144]
     add     rax, rbx
     mov     rdx, rax
     not     rdx
     neg     r10d
     add     r10, rbx
     mov     r11d, dword, ptr, [rbp, +, 24]
     mov     rcx, qword, ptr, [rbp]
     mov     qword, ptr, [rsp, +, 264], rcx
     mov     rcx, qword, ptr, [rbp, +, 16]
     mov     qword, ptr, [rsp, +, 456], rcx
     mov     qword, ptr, [rsp, +, 248], rdi
     lea     rcx, [4*rdi]
     mov     qword, ptr, [rsp, +, 424], rcx
     mov     qword, ptr, [rsp, +, 168], r9
     lea     rcx, [4*r9]
     mov     qword, ptr, [rsp, +, 416], rcx
     xor     r12d, r12d
     movss   xmm0, dword, ptr, [rbp, +, 112]
     movss   dword, ptr, [rsp, +, 184], xmm0
     xorps   xmm0, xmm0
     cvtsi2ss xmm0, r11
     movss   dword, ptr, [rsp, +, 204], xmm0
     xorps   xmm0, xmm0
     mov     ebp, -1
     jmp     .LBB63_11
.LBB63_52:
     mov     rcx, qword, ptr, [rsp, +, 424]
     add     qword, ptr, [rsp, +, 48], rcx
     add     r13, rcx
     mov     rcx, qword, ptr, [rsp, +, 168]
     mov     rdx, qword, ptr, [rsp, +, 256]
     sub     rdx, rcx
     add     r15, qword, ptr, [rsp, +, 416]
     add     rax, rcx
     mov     rcx, qword, ptr, [rsp, +, 448]
     mov     rsi, rcx
     cmp     rcx, qword, ptr, [rsp, +, 432]
     je      .LBB63_53
.LBB63_11:
     mov     qword, ptr, [rsp, +, 256], rdx
     mov     rcx, qword, ptr, [rsp, +, 440]
     cmp     esi, ecx
     cmovb   ecx, esi
     lea     rdx, [rsi, +, 1]
     mov     qword, ptr, [rsp, +, 448], rdx
     xorps   xmm12, xmm12
     cvtsi2ss xmm12, rcx
     divss   xmm12, dword, ptr, [rsp, +, 528]
     addss   xmm12, xmm12
     addss   xmm12, xmm6
     subss   xmm12, dword, ptr, [rsp, +, 336]
     shufps  xmm12, xmm12, 0
     mulps   xmm12, xmmword, ptr, [rsp, +, 512]
     mov     r9, r13
     xor     ecx, ecx
     movss   xmm11, dword, ptr, [rip, +, __real@3f800000]
     jmp     .LBB63_12
.LBB63_23:
 {
 movaps  xmm1, xmm8
 shufps  xmm1, xmm8, 255
 ucomiss xmm1, xmm0
 movaps  xmm9, xmm6
 movaps  xmm6, xmm11
 movss   xmm11, dword, ptr, [rip, +, __real@3f800000]
 movss   xmm3, dword, ptr, [rsp, +, 36]
 jne     .LBB63_24
 jp      .LBB63_24
.LBB63_51:
     inc     rcx
     add     r9, 4
     mov     edx, r10d
     add     edx, ecx
     je      .LBB63_52
.LBB63_12:
     lea     r14, [rbx, +, rcx]
     cmp     r14d, r8d
     mov     edx, r8d
     cmovb   edx, r14d
 );
 xorps   xmm1, xmm1
 cvtsi2ss xmm1, rdx
 divss   xmm1, xmm3
 addss   xmm1, xmm1
 addss   xmm1, xmm6
     subss   xmm1, xmm7
     (self.x * rhs.x) + (self.y * rhs.y) + (self.z * rhs.z) (C:\Users\NickAc\.cargo\registry\src\index.crates.io-6f17d22bba15001f\glam-0.24.2\src\f32\vec3.rs:161)
     shufps  xmm1, xmm1, 0
     mulps   xmm1, xmmword, ptr, [rsp, +, 144]
     addps   xmm1, xmm12
     addps   xmm1, xmmword, ptr, [rsp, +, 608]
     movaps  xmm14, xmmword, ptr, [rsp, +, 592]
 mulps   xmm14, xmm1
 shufps  xmm1, xmm1, 225
 mulps   xmm1, xmm10
 subps   xmm14, xmm1
 divps   xmm14, xmm13
 continue;
 ucomiss xmm0, xmm14
 ja      .LBB63_51
 movaps  xmm1, xmm14
 shufps  xmm1, xmm14, 85
 ucomiss xmm0, xmm1
 ja      .LBB63_51
 movaps  xmm5, xmm11
 subss   xmm5, xmm1
 subss   xmm5, xmm14
 ucomiss xmm0, xmm5
 ja      .LBB63_51
 + barycentric.z * vc.position;
 movaps  xmm2, xmmword, ptr, [rsp, +, 576]
 mulss   xmm2, xmm5
 movaps  xmm4, xmmword, ptr, [rsp, +, 384]
 let tex_coord = (barycentric.x * va.tex_coord
 mulss   xmm4, xmm1
 + barycentric.z * vc.position;
 addss   xmm4, xmm2
 movaps  xmm15, xmmword, ptr, [rsp, +, 400]
 + barycentric.y * vb.tex_coord
 mulss   xmm15, xmm14
 + barycentric.z * vc.position;
 addss   xmm15, xmm4
 let normal =
 ucomiss xmm0, xmm15
 ja      .LBB63_51
 ucomiss xmm15, xmm11
 ja      .LBB63_51
     movaps  xmm11, xmm6
     movaps  xmm4, xmm5
     shufps  xmm4, xmm5, 0
     movaps  xmm8, xmmword, ptr, [rsp, +, 352]
     mulps   xmm8, xmm4
 if color.w == 0.0 {
 movaps  xmm2, xmm14
 shufps  xmm2, xmm14, 0
 movaps  xmm3, xmmword, ptr, [rsp, +, 368]
     mulps   xmm3, xmm2
     movaps  xmm6, xmm9
     mulps   xmm9, xmm1
     addps   xmm9, xmm8
     addps   xmm9, xmm3
     movaps  xmm3, xmm9
     shufps  xmm3, xmm9, 85
     mulss   xmm9, xmm3
     (vertex.tex_coord.x * state.texture.width() as f32) as u32, (D:\IDEs\CLionProjects\nmsr-rasterizer-test\src\shader.rs:126)
     mulss   xmm9, dword, ptr, [rsp, +, 204]
     cvttss2si rdx, xmm9
     ucomiss xmm9, xmm0
     cmovb   edx, r12d
     ucomiss xmm9, dword, ptr, [rip, +, __real@4f7fffff]
     mov     edi, -1
     cmova   edx, edi
     movaps  xmm8, xmmword, ptr, [rip, +, __xmm@3f8000003e99999a3e4ccccd3dcccccd]
     if x >= self.width { (C:\Users\NickAc\.cargo\registry\src\index.crates.io-6f17d22bba15001f\image-0.24.7\src\buffer.rs:782)
     cmp     r11d, edx
     jbe     .LBB63_23
     movaps  xmm8, xmmword, ptr, [rsp, +, 560]
     mulss   xmm8, xmm5
     movaps  xmm7, xmm14
     mulps   xmm7, xmmword, ptr, [rsp, +, 544]
     movaps  xmm9, xmm7
     shufps  xmm9, xmm7, 85
     addss   xmm9, xmm8
     addss   xmm9, xmm7
     movaps  xmm7, xmmword, ptr, [rsp, +, 208]
     mulss   xmm9, xmm3
     (vertex.tex_coord.y * state.texture.height() as f32) as u32, (D:\IDEs\CLionProjects\nmsr-rasterizer-test\src\shader.rs:127)
     mulss   xmm9, dword, ptr, [rsp, +, 200]
     cvttss2si rdi, xmm9
     ucomiss xmm9, xmm0
     cmovb   edi, r12d
     ucomiss xmm9, dword, ptr, [rip, +, __real@4f7fffff]
     cmova   edi, ebp
     imul    rdi, r11
     .saturating_add(x as usize) (C:\Users\NickAc\.cargo\registry\src\index.crates.io-6f17d22bba15001f\image-0.24.7\src\buffer.rs:788)
     mov     edx, edx
     add     rdx, rdi
     lea     rdi, [4*rdx]
     shr     rdx, 62
     neg     rdx
     mov     edx, 0
     sbb     rdx, rdx
     or      rdx, rdi
     movaps  xmm8, xmmword, ptr, [rip, +, __xmm@3f8000003e99999a3e4ccccd3dcccccd]
     cmp     rdx, -5
     ja      .LBB63_23
     lea     rdi, [rdx, +, 4]
     movaps  xmm8, xmmword, ptr, [rip, +, __xmm@3f8000003e99999a3e4ccccd3dcccccd]
     cmp     rdi, qword, ptr, [rsp, +, 456]
     ja      .LBB63_23
     color[1] as f32 / 255.0, (D:\IDEs\CLionProjects\nmsr-rasterizer-test\src\shader.rs:136)
     mov     rdi, qword, ptr, [rsp, +, 264]
     movzx   edi, byte, ptr, [rdi, +, rdx, +, 3]
     xorps   xmm9, xmm9
     cvtsi2ss xmm9, edi
     divss   xmm9, dword, ptr, [rip, +, __real@437f0000]
     xorps   xmm8, xmm8
     ); (D:\IDEs\CLionProjects\nmsr-rasterizer-test\src\shader.rs:139)
     ucomiss xmm9, xmm0
     jne     .LBB63_21
     jnp     .LBB63_23
.LBB63_21:
      (D:\IDEs\CLionProjects\nmsr-rasterizer-test\src\shader.rs:133)
     mov     r12, r13
     movss   xmm3, dword, ptr, [rip, +, __real@3f800000]
     movss   xmm8, dword, ptr, [rsp, +, 184]
     ucomiss xmm3, xmm8
     mov     r13, qword, ptr, [rsp, +, 264]
     movzx   edi, byte, ptr, [r13, +, rdx]
     let color = Vec4::new( (D:\IDEs\CLionProjects\nmsr-rasterizer-test\src\shader.rs:134)
     movzx   edx, word, ptr, [r13, +, rdx, +, 1]
     movss   dword, ptr, [rsp, +, 56], xmm8
     mov     dword, ptr, [rsp, +, 40], 1065353216
     jb      .LBB63_54
      (D:\IDEs\CLionProjects\nmsr-rasterizer-test\src\shader.rs:133)
     mulps   xmm4, xmmword, ptr, [rsp, +, 320]
     movaps  xmm3, xmm1
     mulps   xmm3, xmmword, ptr, [rsp, +, 304]
     addps   xmm3, xmm4
     movss   xmm4, dword, ptr, [rsp, +, 192]
     mulss   xmm4, xmm1
     mulss   xmm5, dword, ptr, [rsp, +, 196]
     addss   xmm4, xmm5
     mulps   xmm2, xmmword, ptr, [rsp, +, 288]
     addps   xmm2, xmm3
     movss   xmm3, dword, ptr, [rsp, +, 188]
     mulss   xmm3, xmm14
     movzx   edi, dil
     cvtsi2ss xmm1, edi
     addss   xmm3, xmm4
     movd    xmm4, edx
     divss   xmm1, dword, ptr, [rip, +, __real@437f0000]
     xorps   xmm5, xmm5
     let color = Vec4::new( (D:\IDEs\CLionProjects\nmsr-rasterizer-test\src\shader.rs:134)
     punpcklbw xmm4, xmm5
     punpcklwd xmm4, xmm5
     cvtdq2ps xmm4, xmm4
     divps   xmm4, xmmword, ptr, [rip, +, __xmm@0000000000000000437f0000437f0000]
     unsafe { UnionCast { a: [x, y, z, w] }.v } (C:\Users\NickAc\.cargo\registry\src\index.crates.io-6f17d22bba15001f\glam-0.24.2\src\f32\sse2\vec4.rs:91)
     movlhps xmm1, xmm4
     shufps  xmm9, xmm4, 212
     (self.x * rhs.x) + (self.y * rhs.y) + (self.z * rhs.z) (C:\Users\NickAc\.cargo\registry\src\index.crates.io-6f17d22bba15001f\glam-0.24.2\src\f32\vec3.rs:161)
     mulps   xmm2, xmmword, ptr, [rsp, +, 496]
     mulss   xmm3, dword, ptr, [rsp, +, 480]
     unsafe { UnionCast { a: [x, y, z, w] }.v } (C:\Users\NickAc\.cargo\registry\src\index.crates.io-6f17d22bba15001f\glam-0.24.2\src\f32\sse2\vec4.rs:91)
     shufps  xmm1, xmm9, 40
     (self.x * rhs.x) + (self.y * rhs.y) + (self.z * rhs.z) (C:\Users\NickAc\.cargo\registry\src\index.crates.io-6f17d22bba15001f\glam-0.24.2\src\f32\vec3.rs:161)
     movaps  xmm4, xmm2
     shufps  xmm4, xmm2, 85
     addss   xmm4, xmm3
     addss   xmm4, xmm2
     * (state.sun.intensity * sun_dot).clamp(state.sun.ambient, MAX_LIGHT); (D:\IDEs\CLionProjects\nmsr-rasterizer-test\src\shader.rs:119)
     mulss   xmm4, dword, ptr, [rsp, +, 180]
     movaps  xmm2, xmm8
     maxss   xmm2, xmm4
     movss   xmm3, dword, ptr, [rip, +, __real@3f800000]
     movaps  xmm8, xmm3
     minss   xmm8, xmm2
     unsafe { UnionCast { a: [x, y, z, w] }.v } (C:\Users\NickAc\.cargo\registry\src\index.crates.io-6f17d22bba15001f\glam-0.24.2\src\f32\sse2\vec4.rs:91)
     movaps  xmm2, xmm8
     unpcklps xmm2, xmm3
     shufps  xmm8, xmm2, 64
     mulps   xmm8, xmm1
     mov     r13, r12
     xor     r12d, r12d
     jmp     .LBB63_23
.LBB63_24:
     if x >= self.width || y >= self.height { (C:\Users\NickAc\.cargo\registry\src\index.crates.io-6f17d22bba15001f\image-0.24.7\src\buffer.rs:814)
     cmp     r14, qword, ptr, [rsp, +, 168]
     jae     .LBB63_55
     cmp     rsi, qword, ptr, [rsp, +, 280]
     jae     .LBB63_55
     lea     rdx, [rax, +, rcx]
     cmp     rdx, qword, ptr, [rsp, +, 272]
     jae     .LBB63_56
 entry
 ucomiss xmm15, dword, ptr, [r15, +, 4*rcx]
 jae     .LBB63_51
     if x >= self.width || y >= self.height { (C:\Users\NickAc\.cargo\registry\src\index.crates.io-6f17d22bba15001f\image-0.24.7\src\buffer.rs:814)
     cmp     r14, qword, ptr, [rsp, +, 248]
     jae     .LBB63_57
     cmp     rsi, qword, ptr, [rsp, +, 240]
     jae     .LBB63_57
     test    r9, r9
     je      .LBB63_58
     cmp     r9, qword, ptr, [rsp, +, 232]
     ja      .LBB63_59
     mulps   xmm8, xmmword, ptr, [rip, +, __xmm@437f0000437f0000437f0000437f0000]
 
 movaps  xmm1, xmm8
 shufps  xmm1, xmm8, 255
 xorps   xmm2, xmm2
 maxss   xmm2, xmm1
 movss   xmm1, dword, ptr, [rip, +, __real@437f0000]
 minss   xmm1, xmm2
 cvttss2si edx, xmm1
     if other.0[3].is_zero() { (C:\Users\NickAc\.cargo\registry\src\index.crates.io-6f17d22bba15001f\image-0.24.7\src\color.rs:734)
     test    dl, dl
     je      .LBB63_50
 }
 xorps   xmm1, xmm1
 maxss   xmm1, xmm8
 movss   xmm4, dword, ptr, [rip, +, __real@437f0000]
 movaps  xmm2, xmm4
 minss   xmm2, xmm1
 cvttss2si r14d, xmm2
 movaps  xmm1, xmm8
 unpckhpd xmm1, xmm8
 shufps  xmm8, xmm8, 85
 xorps   xmm2, xmm2
 maxss   xmm2, xmm8
 movaps  xmm3, xmm4
 minss   xmm3, xmm2
 cvttss2si edi, xmm3
 shl     edi, 8
 xorps   xmm2, xmm2
 maxss   xmm2, xmm1
 movaps  xmm1, xmm4
 minss   xmm1, xmm2
 cvttss2si r12d, xmm1
 movzx   r12d, r12b
 or      r12d, edi
 movd    xmm2, r12d
     if other.0[3].is_zero() { (C:\Users\NickAc\.cargo\registry\src\index.crates.io-6f17d22bba15001f\image-0.24.7\src\color.rs:734)
     movzx   edx, dl
     cmp     edx, 255
     jne     .LBB63_39
     *self = *other; (C:\Users\NickAc\.cargo\registry\src\index.crates.io-6f17d22bba15001f\image-0.24.7\src\color.rs:738)
     punpcklbw xmm2, xmmword, ptr, [rip, +, __xmm@00000000000000000000000000000000]
     movdqa  xmm1, xmm2
     pslld   xmm1, 16
     psrld   xmm2, 16
     pslld   xmm2, 8
     por     xmm2, xmm1
     movd    edx, xmm2
     movzx   edi, r14b
     or      edi, edx
     or      edi, -16777216
     mov     rdx, qword, ptr, [rsp, +, 48]
     mov     dword, ptr, [rdx, +, 4*rcx], edi
     movss   xmm3, dword, ptr, [rsp, +, 36]
     jmp     .LBB63_49
.LBB63_39:
     Some(*self as f32) (C:\Users\NickAc\.cargo\registry\src\index.crates.io-6f17d22bba15001f\num-traits-0.2.17\src\cast.rs:252)
     mov     rdi, qword, ptr, [rsp, +, 48]
     movzx   edi, byte, ptr, [rdi, +, 4*rcx, +, 3]
     shl     edi, 8
     or      edi, edx
     movd    xmm1, edi
     xorps   xmm3, xmm3
     punpcklbw xmm1, xmm3
     punpcklwd xmm1, xmm3
     cvtdq2ps xmm5, xmm1
     fg_a.to_f32().unwrap() / max_t, (C:\Users\NickAc\.cargo\registry\src\index.crates.io-6f17d22bba15001f\image-0.24.7\src\color.rs:757)
     divps   xmm5, xmmword, ptr, [rip, +, __xmm@0000000000000000437f0000437f0000]
     movaps  xmm4, xmm5
     shufps  xmm4, xmm5, 85
     let alpha_final = bg_a + fg_a - bg_a * fg_a; (C:\Users\NickAc\.cargo\registry\src\index.crates.io-6f17d22bba15001f\image-0.24.7\src\color.rs:761)
     movaps  xmm1, xmm5
     addss   xmm1, xmm4
     movaps  xmm3, xmm5
     mulss   xmm3, xmm4
     subss   xmm1, xmm3
     if alpha_final == 0.0 { (C:\Users\NickAc\.cargo\registry\src\index.crates.io-6f17d22bba15001f\image-0.24.7\src\color.rs:762)
     ucomiss xmm1, xmm0
     movss   xmm3, dword, ptr, [rsp, +, 36]
     mov     r12d, 0
     jne     .LBB63_40
     jnp     .LBB63_50
.LBB63_40:
     let (bg_r, bg_g, bg_b, bg_a) = (self.0[0], self.0[1], self.0[2], self.0[3]); (C:\Users\NickAc\.cargo\registry\src\index.crates.io-6f17d22bba15001f\image-0.24.7\src\color.rs:745)
     movaps  xmmword, ptr, [rsp, +, 464], xmm4
     mov     rdx, qword, ptr, [rsp, +, 48]
     movzx   edx, byte, ptr, [rdx, +, 4*rcx]
     Some(*self as f32) (C:\Users\NickAc\.cargo\registry\src\index.crates.io-6f17d22bba15001f\num-traits-0.2.17\src\cast.rs:252)
     movzx   edi, r14b
     movd    xmm3, edi
     pinsrw  xmm3, edx, 2
     cvtdq2ps xmm3, xmm3
     fg_r.to_f32().unwrap() / max_t, (C:\Users\NickAc\.cargo\registry\src\index.crates.io-6f17d22bba15001f\image-0.24.7\src\color.rs:754)
     divps   xmm3, xmmword, ptr, [rip, +, __xmm@0000000000000000437f0000437f0000]
     let (fg_r_a, fg_g_a, fg_b_a) = (fg_r * fg_a, fg_g * fg_a, fg_b * fg_a); (C:\Users\NickAc\.cargo\registry\src\index.crates.io-6f17d22bba15001f\image-0.24.7\src\color.rs:768)
     mulps   xmm3, xmm5
     fg_r_a + bg_r_a * (1.0 - fg_a), (C:\Users\NickAc\.cargo\registry\src\index.crates.io-6f17d22bba15001f\image-0.24.7\src\color.rs:772)
     movaps  xmm4, xmm11
     subss   xmm4, xmm5
     movaps  xmm14, xmm3
     shufps  xmm14, xmm3, 85
     mulss   xmm14, xmm4
     addss   xmm14, xmm3
     out_r_a / alpha_final, (C:\Users\NickAc\.cargo\registry\src\index.crates.io-6f17d22bba15001f\image-0.24.7\src\color.rs:779)
     divss   xmm14, xmm1
     NumCast::from(max_t * out_r).unwrap(), (C:\Users\NickAc\.cargo\registry\src\index.crates.io-6f17d22bba15001f\image-0.24.7\src\color.rs:786)
     mulss   xmm14, dword, ptr, [rip, +, __real@437f0000]
     if *self > -1.0 && *self < MAX_P1 { (C:\Users\NickAc\.cargo\registry\src\index.crates.io-6f17d22bba15001f\num-traits-0.2.17\src\cast.rs:336)
     ucomiss xmm14, xmm6
     jbe     .LBB63_60
     movss   xmm3, dword, ptr, [rip, +, __real@43800000]
     ucomiss xmm3, xmm14
     jbe     .LBB63_60
     let (fg_r_a, fg_g_a, fg_b_a) = (fg_r * fg_a, fg_g * fg_a, fg_b * fg_a); (C:\Users\NickAc\.cargo\registry\src\index.crates.io-6f17d22bba15001f\image-0.24.7\src\color.rs:768)
     movdqa  xmm3, xmm2
     psrlw   xmm3, 8
     mov     rdx, qword, ptr, [rsp, +, 48]
     movzx   edx, byte, ptr, [rdx, +, 4*rcx, +, 1]
     movd    xmm7, edx
     psllw   xmm7, 8
     movdqa  xmm8, xmmword, ptr, [rip, +, __xmm@ffffffffffffffffffffffffffff00ff]
     pandn   xmm8, xmm7
     por     xmm8, xmm3
     pxor    xmm3, xmm3
     punpcklbw xmm8, xmm3
     punpcklwd xmm8, xmm3
     cvtdq2ps xmm3, xmm8
     divps   xmm3, xmmword, ptr, [rip, +, __xmm@0000000000000000437f0000437f0000]
     mulps   xmm3, xmm5
     fg_g_a + bg_g_a * (1.0 - fg_a), (C:\Users\NickAc\.cargo\registry\src\index.crates.io-6f17d22bba15001f\image-0.24.7\src\color.rs:773)
     movaps  xmm8, xmm3
     shufps  xmm8, xmm3, 85
     mulss   xmm8, xmm4
     addss   xmm8, xmm3
     out_g_a / alpha_final, (C:\Users\NickAc\.cargo\registry\src\index.crates.io-6f17d22bba15001f\image-0.24.7\src\color.rs:780)
     divss   xmm8, xmm1
     NumCast::from(max_t * out_g).unwrap(), (C:\Users\NickAc\.cargo\registry\src\index.crates.io-6f17d22bba15001f\image-0.24.7\src\color.rs:787)
     mulss   xmm8, dword, ptr, [rip, +, __real@437f0000]
     if *self > -1.0 && *self < MAX_P1 { (C:\Users\NickAc\.cargo\registry\src\index.crates.io-6f17d22bba15001f\num-traits-0.2.17\src\cast.rs:336)
     ucomiss xmm8, xmm6
     jbe     .LBB63_62
     movss   xmm3, dword, ptr, [rip, +, __real@43800000]
     ucomiss xmm3, xmm8
     jbe     .LBB63_62
     NumCast::from(max_t * out_b).unwrap(), (C:\Users\NickAc\.cargo\registry\src\index.crates.io-6f17d22bba15001f\image-0.24.7\src\color.rs:788)
     movd    edx, xmm2
     movzx   edx, dl
     cvtsi2ss xmm2, edx
     movss   xmm7, dword, ptr, [rip, +, __real@437f0000]
     divss   xmm2, xmm7
     mov     rdx, qword, ptr, [rsp, +, 48]
     movzx   edx, byte, ptr, [rdx, +, 4*rcx, +, 2]
     xorps   xmm3, xmm3
     cvtsi2ss xmm3, edx
     divss   xmm3, xmm7
     mulss   xmm3, dword, ptr, [rsp, +, 464]
     mulss   xmm2, xmm5
     mulss   xmm4, xmm3
     addss   xmm4, xmm2
     divss   xmm4, xmm1
     mulss   xmm4, xmm7
     if *self > -1.0 && *self < MAX_P1 { (C:\Users\NickAc\.cargo\registry\src\index.crates.io-6f17d22bba15001f\num-traits-0.2.17\src\cast.rs:336)
     ucomiss xmm4, xmm6
     jbe     .LBB63_63
     movss   xmm2, dword, ptr, [rip, +, __real@43800000]
     ucomiss xmm2, xmm4
     jbe     .LBB63_63
     NumCast::from(max_t * alpha_final).unwrap(), (C:\Users\NickAc\.cargo\registry\src\index.crates.io-6f17d22bba15001f\image-0.24.7\src\color.rs:789)
     mulss   xmm1, dword, ptr, [rip, +, __real@437f0000]
     if *self > -1.0 && *self < MAX_P1 { (C:\Users\NickAc\.cargo\registry\src\index.crates.io-6f17d22bba15001f\num-traits-0.2.17\src\cast.rs:336)
     ucomiss xmm1, xmm6
     movaps  xmm7, xmmword, ptr, [rsp, +, 208]
     movss   xmm3, dword, ptr, [rsp, +, 36]
     jbe     .LBB63_64
     movss   xmm2, dword, ptr, [rip, +, __real@43800000]
     ucomiss xmm2, xmm1
     jbe     .LBB63_64
     cvttss2si edx, xmm14
     cvttss2si edi, xmm8
     cvttss2si r14d, xmm4
     cvttss2si r12d, xmm1
     *self = Rgba([ (C:\Users\NickAc\.cargo\registry\src\index.crates.io-6f17d22bba15001f\image-0.24.7\src\color.rs:785)
     movzx   r14d, r14b
     shl     r12d, 8
     or      r12d, r14d
     movzx   edx, dl
     movzx   edi, dil
     shl     edi, 8
     or      edi, edx
     movd    xmm1, edi
     pinsrw  xmm1, r12d, 1
     mov     rdx, qword, ptr, [rsp, +, 48]
     movd    dword, ptr, [rdx, +, 4*rcx], xmm1
.LBB63_49:
     xor     r12d, r12d
.LBB63_50:
     *self.get_pixel_mut(x, y) = pixel (C:\Users\NickAc\.cargo\registry\src\index.crates.io-6f17d22bba15001f\image-0.24.7\src\buffer.rs:982)
     movss   dword, ptr, [r15, +, 4*rcx], xmm15
     jmp     .LBB63_51
.LBB63_53:
 
 movaps  xmm6, xmmword, ptr, [rsp, +, 624]
 movaps  xmm7, xmmword, ptr, [rsp, +, 640]
 movaps  xmm8, xmmword, ptr, [rsp, +, 656]
 movaps  xmm9, xmmword, ptr, [rsp, +, 672]
 movaps  xmm10, xmmword, ptr, [rsp, +, 688]
 movaps  xmm11, xmmword, ptr, [rsp, +, 704]
 movaps  xmm12, xmmword, ptr, [rsp, +, 720]
 movaps  xmm13, xmmword, ptr, [rsp, +, 736]
 movaps  xmm14, xmmword, ptr, [rsp, +, 752]
 movaps  xmm15, xmmword, ptr, [rsp, +, 768]
 add     rsp, 792
 pop     rbx
 pop     rbp
 pop     rdi
 pop     rsi
 pop     r12
 pop     r13
 pop     r14
 pop     r15
 ret
.LBB63_37:
 .collect();
 lea     r8, [rip, +, __unnamed_123]
 call    core::panicking::panic_bounds_check
 ud2
.LBB63_38:
 let vertices = unsafe { vertices.into_inner_unchecked() };
 lea     r8, [rip, +, __unnamed_124]
 mov     rcx, rax
 call    core::panicking::panic_bounds_check
 ud2
.LBB63_65:
 
 lea     r8, [rip, +, __unnamed_125]
 call    core::panicking::panic_bounds_check
 ud2
.LBB63_55:
     (x, y), (C:\Users\NickAc\.cargo\registry\src\index.crates.io-6f17d22bba15001f\image-0.24.7\src\buffer.rs:772)
     add     ebx, ecx
     mov     dword, ptr, [rsp, +, 56], ebx
     mov     dword, ptr, [rsp, +, 60], esi
     mov     rax, qword, ptr, [rsp, +, 168]
     (self.width, self.height) (C:\Users\NickAc\.cargo\registry\src\index.crates.io-6f17d22bba15001f\image-0.24.7\src\buffer.rs:773)
     mov     dword, ptr, [rsp, +, 40], eax
     mov     rax, qword, ptr, [rsp, +, 280]
     mov     dword, ptr, [rsp, +, 44], eax
     lea     rax, [rsp, +, 56]
     None => panic!( (C:\Users\NickAc\.cargo\registry\src\index.crates.io-6f17d22bba15001f\image-0.24.7\src\buffer.rs:770)
     mov     qword, ptr, [rsp, +, 112], rax
     lea     rax, [rip, +, _ZN50_$LT$$LP$U$C$T$RP$$u20$as$u20$core..fmt..Debug$GT$3fmt17hbf9006c752ab7bc8E]
     mov     qword, ptr, [rsp, +, 120], rax
     lea     rcx, [rsp, +, 40]
     mov     qword, ptr, [rsp, +, 128], rcx
     mov     qword, ptr, [rsp, +, 136], rax
     lea     rax, [rip, +, __unnamed_126]
     mov     qword, ptr, [rsp, +, 64], rax
     mov     qword, ptr, [rsp, +, 72], 2
     mov     qword, ptr, [rsp, +, 96], 0
     lea     rax, [rsp, +, 112]
     mov     qword, ptr, [rsp, +, 80], rax
     mov     qword, ptr, [rsp, +, 88], 2
     lea     rdx, [rip, +, __unnamed_127]
     lea     rcx, [rsp, +, 64]
     call    core::panicking::panic_fmt
     ud2
.LBB63_56:
     sub     rcx, qword, ptr, [rsp, +, 256]
     lea     r8, [rip, +, __unnamed_127]
     mov     rdx, qword, ptr, [rsp, +, 272]
     call    core::slice::index::slice_end_index_len_fail
     ud2
.LBB63_57:
     (x, y), (C:\Users\NickAc\.cargo\registry\src\index.crates.io-6f17d22bba15001f\image-0.24.7\src\buffer.rs:950)
     add     ebx, ecx
     mov     dword, ptr, [rsp, +, 56], ebx
     mov     dword, ptr, [rsp, +, 60], esi
     mov     rax, qword, ptr, [rsp, +, 248]
     (self.width, self.height) (C:\Users\NickAc\.cargo\registry\src\index.crates.io-6f17d22bba15001f\image-0.24.7\src\buffer.rs:951)
     mov     dword, ptr, [rsp, +, 40], eax
     mov     rax, qword, ptr, [rsp, +, 240]
     mov     dword, ptr, [rsp, +, 44], eax
     lea     rax, [rsp, +, 56]
     None => panic!( (C:\Users\NickAc\.cargo\registry\src\index.crates.io-6f17d22bba15001f\image-0.24.7\src\buffer.rs:948)
     mov     qword, ptr, [rsp, +, 112], rax
     lea     rax, [rip, +, _ZN50_$LT$$LP$U$C$T$RP$$u20$as$u20$core..fmt..Debug$GT$3fmt17hbf9006c752ab7bc8E]
     mov     qword, ptr, [rsp, +, 120], rax
     lea     rcx, [rsp, +, 40]
     mov     qword, ptr, [rsp, +, 128], rcx
     mov     qword, ptr, [rsp, +, 136], rax
     lea     rax, [rip, +, __unnamed_126]
     mov     qword, ptr, [rsp, +, 64], rax
     mov     qword, ptr, [rsp, +, 72], 2
     mov     qword, ptr, [rsp, +, 96], 0
     lea     rax, [rsp, +, 112]
     mov     qword, ptr, [rsp, +, 80], rax
     mov     qword, ptr, [rsp, +, 88], 2
     lea     rdx, [rip, +, __unnamed_128]
     lea     rcx, [rsp, +, 64]
     call    core::panicking::panic_fmt
     ud2
.LBB63_58:
     lea     r8, [rip, +, __unnamed_128]
     mov     rcx, -4
     mov     rdx, r9
     call    core::slice::index::slice_index_order_fail
     ud2
.LBB63_59:
     lea     r8, [rip, +, __unnamed_128]
     mov     rcx, r9
     mov     rdx, qword, ptr, [rsp, +, 232]
     call    core::slice::index::slice_end_index_len_fail
     ud2
.LBB63_54:
     lea     rax, [rsp, +, 56]
     mov     qword, ptr, [rsp, +, 112], rax
     lea     rax, [rip, +, _ZN4core3fmt5float50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$f32$GT$3fmt17h4b4cfcf3884c54f4E]
     mov     qword, ptr, [rsp, +, 120], rax
     lea     rcx, [rsp, +, 40]
     mov     qword, ptr, [rsp, +, 128], rcx
     mov     qword, ptr, [rsp, +, 136], rax
     lea     rax, [rip, +, __unnamed_129]
     mov     qword, ptr, [rsp, +, 64], rax
     mov     qword, ptr, [rsp, +, 72], 2
     mov     qword, ptr, [rsp, +, 96], 0
     lea     rax, [rsp, +, 112]
     mov     qword, ptr, [rsp, +, 80], rax
     mov     qword, ptr, [rsp, +, 88], 2
     lea     rdx, [rip, +, __unnamed_130]
     lea     rcx, [rsp, +, 64]
     call    core::panicking::panic_fmt
     ud2
.LBB63_60:
     lea     rcx, [rip, +, __unnamed_1]
     lea     r8, [rip, +, __unnamed_131]
     mov     edx, 43
     call    core::panicking::panic
     ud2
.LBB63_62:
     lea     rcx, [rip, +, __unnamed_1]
     lea     r8, [rip, +, __unnamed_132]
     mov     edx, 43
     call    core::panicking::panic
     ud2
.LBB63_63:
     lea     rcx, [rip, +, __unnamed_1]
     lea     r8, [rip, +, __unnamed_133]
     mov     edx, 43
     call    core::panicking::panic
     ud2
.LBB63_64:
     lea     rcx, [rip, +, __unnamed_1]
     lea     r8, [rip, +, __unnamed_134]
     mov     edx, 43
     call    core::panicking::panic
     ud2
.LBB63_35:
 #[inline(never)]
 mov     qword, ptr, [rsp, +, 40], r8
 lea     rax, [rsp, +, 40]
 mov     qword, ptr, [rsp, +, 112], rax
 lea     rax, [rip, +, _ZN4core3fmt3num3imp54_$LT$impl$u20$core..fmt..Display$u20$for$u20$usize$GT$3fmt17h60bcf32dc6934cb5E]
 mov     qword, ptr, [rsp, +, 120], rax
     lea     rax, [rip, +, __unnamed_135]
     mov     qword, ptr, [rsp, +, 64], rax
     mov     qword, ptr, [rsp, +, 72], 2
     mov     qword, ptr, [rsp, +, 96], 0
     lea     rax, [rsp, +, 112]
     mov     qword, ptr, [rsp, +, 80], rax
     mov     qword, ptr, [rsp, +, 88], 1
 lea     rdx, [rip, +, __unnamed_136]
 lea     rcx, [rsp, +, 64]
 call    core::panicking::panic_fmt
 ud2
